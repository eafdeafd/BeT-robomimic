
============= Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot0_gripper_qpos', 'object', 'robot0_eef_quat', 'robot0_eef_pos']
using obs modality: rgb with keys: []
using obs modality: depth with keys: []
using obs modality: scan with keys: []
/home/andrew/Desktop/robo_sims/robomimic/robomimic/scripts

============= Loaded Environment Metadata =============
obs key object with shape (14,)
obs key robot0_eef_pos with shape (3,)
obs key robot0_eef_quat with shape (4,)
obs key robot0_gripper_qpos with shape (2,)
Created environment with name PickPlaceCan
Action size is 7
PickPlaceCan
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}


============= Model Summary =============
BET (
  ModuleDict(
    (mlp): MLP(
        input_dim=7
        output_dim=7
        layer_dims=[512, 512]
        layer_func=Linear
        dropout=None
        act=Mish
        output_act=Tanh
    )
    (policy): MinGPT(
      (model): GPT(
        (tok_emb): Linear(in_features=26, out_features=72, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (blocks): Sequential(
          (0): Block(
            (ln1): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=72, out_features=72, bias=True)
              (query): Linear(in_features=72, out_features=72, bias=True)
              (value): Linear(in_features=72, out_features=72, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=72, out_features=72, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=72, out_features=288, bias=True)
              (1): GELU()
              (2): Linear(in_features=288, out_features=72, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (1): Block(
            (ln1): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=72, out_features=72, bias=True)
              (query): Linear(in_features=72, out_features=72, bias=True)
              (value): Linear(in_features=72, out_features=72, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=72, out_features=72, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=72, out_features=288, bias=True)
              (1): GELU()
              (2): Linear(in_features=288, out_features=72, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (2): Block(
            (ln1): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=72, out_features=72, bias=True)
              (query): Linear(in_features=72, out_features=72, bias=True)
              (value): Linear(in_features=72, out_features=72, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=72, out_features=72, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=72, out_features=288, bias=True)
              (1): GELU()
              (2): Linear(in_features=288, out_features=72, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (3): Block(
            (ln1): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=72, out_features=72, bias=True)
              (query): Linear(in_features=72, out_features=72, bias=True)
              (value): Linear(in_features=72, out_features=72, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=72, out_features=72, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=72, out_features=288, bias=True)
              (1): GELU()
              (2): Linear(in_features=288, out_features=72, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (ln_f): LayerNorm((72,), eps=1e-05, elementwise_affine=True)
        (head): Linear(in_features=72, out_features=512, bias=False)
      )
    )
  )
)

SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 47%|####7     | 85/180 [00:00<00:00, 843.22it/s] 94%|#########4| 170/180 [00:00<00:00, 842.05it/s]100%|##########| 180/180 [00:00<00:00, 841.53it/s]
SequenceDataset: caching get_item calls...
  0%|          | 0/20883 [00:00<?, ?it/s]  7%|6         | 1377/20883 [00:00<00:01, 13762.53it/s] 13%|#3        | 2762/20883 [00:00<00:01, 13810.55it/s] 20%|#9        | 4144/20883 [00:00<00:01, 13800.68it/s] 26%|##6       | 5525/20883 [00:00<00:01, 13780.86it/s] 33%|###3      | 6909/20883 [00:00<00:01, 13799.05it/s] 40%|###9      | 8289/20883 [00:00<00:00, 13779.27it/s] 46%|####6     | 9667/20883 [00:00<00:00, 13738.79it/s] 53%|#####2    | 11041/20883 [00:00<00:00, 13623.94it/s] 59%|#####9    | 12404/20883 [00:00<00:00, 12878.13it/s] 66%|######5   | 13700/20883 [00:01<00:00, 12192.64it/s] 72%|#######1  | 15008/20883 [00:01<00:00, 12444.58it/s] 78%|#######8  | 16347/20883 [00:01<00:00, 12716.49it/s] 85%|########4 | 17723/20883 [00:01<00:00, 13019.37it/s] 91%|#########1| 19077/20883 [00:01<00:00, 13171.96it/s] 98%|#########7| 20429/20883 [00:01<00:00, 13271.76it/s]100%|##########| 20883/20883 [00:01<00:00, 13236.22it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 834.31it/s]
SequenceDataset: caching get_item calls...
  0%|          | 0/2324 [00:00<?, ?it/s] 58%|#####8    | 1349/2324 [00:00<00:00, 13486.93it/s]100%|##########| 2324/2324 [00:00<00:00, 13442.02it/s]

============= Training Dataset =============
SequenceDataset (
	path=/home/andrew/Desktop/robo_sims/robomimic/datasets/can/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=all
	num_demos=180
	num_sequences=20883
)

  0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   6%|6         | 6/100 [00:00<00:01, 54.24it/s]K-means clustering:  12%|#2        | 12/100 [00:00<00:01, 54.25it/s]K-means clustering:  18%|#8        | 18/100 [00:00<00:01, 54.82it/s]K-means clustering:  24%|##4       | 24/100 [00:00<00:01, 55.90it/s]K-means clustering:  30%|###       | 30/100 [00:00<00:01, 56.92it/s]K-means clustering:  36%|###6      | 36/100 [00:00<00:01, 56.61it/s]K-means clustering:  42%|####2     | 42/100 [00:00<00:01, 57.14it/s]K-means clustering:  48%|####8     | 48/100 [00:00<00:00, 57.30it/s]K-means clustering:  54%|#####4    | 54/100 [00:00<00:00, 57.33it/s]K-means clustering:  60%|######    | 60/100 [00:01<00:00, 57.36it/s]K-means clustering:  66%|######6   | 66/100 [00:01<00:00, 57.55it/s]K-means clustering:  72%|#######2  | 72/100 [00:01<00:00, 57.57it/s]K-means clustering:  78%|#######8  | 78/100 [00:01<00:00, 57.80it/s]K-means clustering:  84%|########4 | 84/100 [00:01<00:00, 58.09it/s]K-means clustering:  90%|######### | 90/100 [00:01<00:00, 58.15it/s]K-means clustering:  96%|#########6| 96/100 [00:01<00:00, 57.65it/s]K-means clustering: 100%|##########| 100/100 [00:01<00:00, 57.15it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  0%|          | 0/100 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "multitask_train.py", line 21, in <module>
    model = train(config, device=device)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/scripts/train.py", line 189, in train
    step_log = TrainUtils.run_epoch(model=model, data_loader=train_loader, epoch=epoch, num_steps=train_num_steps)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/utils/train_utils.py", line 536, in run_epoch
    input_batch = model.process_batch_for_training(batch)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/bet.py", line 182, in process_batch_for_training
    batch["obs"] = self._format_input(batch["obs"]) if self.multi_task else batch["obs"]
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/bet.py", line 156, in _format_input
    return torch.cat((obs, x), dim=-1)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument tensors in method wrapper___cat)
