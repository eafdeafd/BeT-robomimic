
============= Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot0_gripper_qpos', 'object', 'robot0_eef_quat', 'robot0_eef_pos']
using obs modality: rgb with keys: []
using obs modality: depth with keys: []
using obs modality: scan with keys: []
/home/andrew/Desktop/robo_sims/robomimic

============= Loaded Environment Metadata =============
obs key object with shape (14,)
obs key robot0_eef_pos with shape (3,)
obs key robot0_eef_quat with shape (4,)
obs key robot0_gripper_qpos with shape (2,)
Created environment with name NutAssemblySquare
Action size is 7
NutAssemblySquare
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}
Created environment with name PickPlaceCan
Action size is 7
PickPlaceCan
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}
Created environment with name Lift
Action size is 7
Lift
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}


============= Model Summary =============
BET (
  ModuleDict(
    (mlp): MLP(
        input_dim=7
        output_dim=7
        layer_dims=[512, 512]
        layer_func=Linear
        dropout=None
        act=Mish
        output_act=Tanh
    )
    (policy): MinGPT(
      (model): GPT(
        (tok_emb): Linear(in_features=26, out_features=120, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (blocks): Sequential(
          (0): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (1): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (2): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (3): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (4): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (5): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (ln_f): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
        (head): Linear(in_features=120, out_features=512, bias=False)
      )
    )
  )
)

SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 47%|####7     | 85/180 [00:00<00:00, 843.41it/s] 94%|#########4| 170/180 [00:00<00:00, 833.39it/s]100%|##########| 180/180 [00:00<00:00, 835.74it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 862.17it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 48%|####7     | 86/180 [00:00<00:00, 856.49it/s] 96%|#########5| 172/180 [00:00<00:00, 838.11it/s]100%|##########| 180/180 [00:00<00:00, 840.38it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 774.14it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 48%|####7     | 86/180 [00:00<00:00, 855.21it/s] 97%|#########7| 175/180 [00:00<00:00, 872.68it/s]100%|##########| 180/180 [00:00<00:00, 869.25it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 902.09it/s]

============= Training Dataset =============
[SequenceDataset (
	path=datasets/square/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=180
	num_sequences=27165
), SequenceDataset (
	path=/home/andrew/Desktop/robo_sims/robomimic/datasets/can/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=180
	num_sequences=20883
), SequenceDataset (
	path=/home/andrew/Desktop/robo_sims/robomimic/datasets/lift/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=180
	num_sequences=8640
)]

  0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   2%|2         | 2/100 [00:00<00:05, 17.95it/s]K-means clustering:   4%|4         | 4/100 [00:00<00:05, 18.16it/s]K-means clustering:   6%|6         | 6/100 [00:00<00:05, 18.71it/s]K-means clustering:   8%|8         | 8/100 [00:00<00:04, 19.03it/s]K-means clustering:  10%|#         | 10/100 [00:00<00:04, 19.35it/s]K-means clustering:  13%|#3        | 13/100 [00:00<00:04, 19.63it/s]K-means clustering:  16%|#6        | 16/100 [00:00<00:04, 20.12it/s]K-means clustering:  19%|#9        | 19/100 [00:00<00:03, 20.51it/s]K-means clustering:  22%|##2       | 22/100 [00:01<00:03, 20.39it/s]K-means clustering:  25%|##5       | 25/100 [00:01<00:03, 20.27it/s]K-means clustering:  28%|##8       | 28/100 [00:01<00:03, 19.58it/s]K-means clustering:  30%|###       | 30/100 [00:01<00:03, 19.20it/s]K-means clustering:  32%|###2      | 32/100 [00:01<00:03, 18.88it/s]K-means clustering:  34%|###4      | 34/100 [00:01<00:03, 18.60it/s]K-means clustering:  36%|###6      | 36/100 [00:01<00:03, 18.39it/s]K-means clustering:  38%|###8      | 38/100 [00:01<00:03, 18.17it/s]K-means clustering:  40%|####      | 40/100 [00:02<00:03, 17.99it/s]K-means clustering:  42%|####2     | 42/100 [00:02<00:03, 17.88it/s]K-means clustering:  44%|####4     | 44/100 [00:02<00:03, 17.65it/s]K-means clustering:  46%|####6     | 46/100 [00:02<00:03, 17.01it/s]K-means clustering:  48%|####8     | 48/100 [00:02<00:03, 16.87it/s]K-means clustering:  50%|#####     | 50/100 [00:02<00:02, 16.79it/s]K-means clustering:  52%|#####2    | 52/100 [00:02<00:02, 16.78it/s]K-means clustering:  54%|#####4    | 54/100 [00:02<00:02, 16.78it/s]K-means clustering:  56%|#####6    | 56/100 [00:03<00:02, 16.69it/s]K-means clustering:  58%|#####8    | 58/100 [00:03<00:02, 16.52it/s]K-means clustering:  60%|######    | 60/100 [00:03<00:02, 16.54it/s]K-means clustering:  62%|######2   | 62/100 [00:03<00:02, 16.65it/s]K-means clustering:  64%|######4   | 64/100 [00:03<00:02, 16.93it/s]K-means clustering:  66%|######6   | 66/100 [00:03<00:02, 17.00it/s]K-means clustering:  68%|######8   | 68/100 [00:03<00:01, 17.23it/s]K-means clustering:  70%|#######   | 70/100 [00:03<00:01, 17.50it/s]K-means clustering:  72%|#######2  | 72/100 [00:03<00:01, 17.68it/s]K-means clustering:  74%|#######4  | 74/100 [00:04<00:01, 17.77it/s]K-means clustering:  76%|#######6  | 76/100 [00:04<00:01, 17.86it/s]K-means clustering:  78%|#######8  | 78/100 [00:04<00:01, 17.56it/s]K-means clustering:  80%|########  | 80/100 [00:04<00:01, 17.92it/s]K-means clustering:  82%|########2 | 82/100 [00:04<00:00, 18.01it/s]K-means clustering:  84%|########4 | 84/100 [00:04<00:00, 18.11it/s]K-means clustering:  86%|########6 | 86/100 [00:04<00:00, 18.25it/s]K-means clustering:  88%|########8 | 88/100 [00:04<00:00, 18.47it/s]K-means clustering:  90%|######### | 90/100 [00:04<00:00, 18.85it/s]K-means clustering:  93%|#########3| 93/100 [00:05<00:00, 19.09it/s]K-means clustering:  95%|#########5| 95/100 [00:05<00:00, 19.02it/s]K-means clustering:  97%|#########7| 97/100 [00:05<00:00, 18.62it/s]K-means clustering: 100%|##########| 100/100 [00:05<00:00, 19.59it/s]K-means clustering: 100%|##########| 100/100 [00:05<00:00, 18.26it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  1%|1         | 1/100 [00:00<00:19,  5.00it/s]  6%|6         | 6/100 [00:00<00:04, 23.43it/s] 11%|#1        | 11/100 [00:00<00:02, 31.34it/s] 15%|#5        | 15/100 [00:00<00:02, 33.70it/s] 19%|#9        | 19/100 [00:00<00:02, 35.23it/s] 23%|##3       | 23/100 [00:00<00:02, 36.06it/s] 29%|##9       | 29/100 [00:00<00:01, 42.38it/s] 35%|###5      | 35/100 [00:00<00:01, 46.68it/s] 41%|####1     | 41/100 [00:01<00:01, 48.49it/s] 46%|####6     | 46/100 [00:01<00:01, 46.71it/s] 51%|#####1    | 51/100 [00:01<00:01, 46.16it/s] 56%|#####6    | 56/100 [00:01<00:00, 45.08it/s] 61%|######1   | 61/100 [00:01<00:00, 45.51it/s] 67%|######7   | 67/100 [00:01<00:00, 47.13it/s] 73%|#######3  | 73/100 [00:01<00:00, 48.52it/s] 79%|#######9  | 79/100 [00:01<00:00, 49.82it/s] 85%|########5 | 85/100 [00:01<00:00, 50.58it/s] 91%|#########1| 91/100 [00:02<00:00, 50.24it/s] 97%|#########7| 97/100 [00:02<00:00, 50.19it/s]100%|##########| 100/100 [00:02<00:00, 43.90it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  5%|5         | 5/100 [00:00<00:02, 47.29it/s] 10%|#         | 10/100 [00:00<00:01, 45.18it/s] 15%|#5        | 15/100 [00:00<00:01, 46.51it/s] 21%|##1       | 21/100 [00:00<00:01, 49.26it/s] 26%|##6       | 26/100 [00:00<00:01, 46.64it/s] 31%|###1      | 31/100 [00:00<00:01, 46.87it/s] 37%|###7      | 37/100 [00:00<00:01, 49.39it/s] 43%|####3     | 43/100 [00:00<00:01, 51.43it/s] 49%|####9     | 49/100 [00:00<00:00, 52.12it/s] 55%|#####5    | 55/100 [00:01<00:00, 53.26it/s] 61%|######1   | 61/100 [00:01<00:00, 54.45it/s] 67%|######7   | 67/100 [00:01<00:00, 55.51it/s] 73%|#######3  | 73/100 [00:01<00:00, 54.26it/s] 79%|#######9  | 79/100 [00:01<00:00, 50.51it/s] 85%|########5 | 85/100 [00:01<00:00, 48.67it/s] 90%|######### | 90/100 [00:01<00:00, 48.37it/s] 96%|#########6| 96/100 [00:01<00:00, 49.43it/s]100%|##########| 100/100 [00:01<00:00, 50.08it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  5%|5         | 5/100 [00:00<00:02, 39.28it/s] 10%|#         | 10/100 [00:00<00:02, 44.68it/s] 16%|#6        | 16/100 [00:00<00:01, 48.54it/s] 22%|##2       | 22/100 [00:00<00:01, 50.95it/s] 28%|##8       | 28/100 [00:00<00:01, 49.43it/s] 33%|###3      | 33/100 [00:00<00:01, 48.81it/s] 38%|###8      | 38/100 [00:00<00:01, 49.16it/s] 44%|####4     | 44/100 [00:00<00:01, 50.02it/s] 50%|#####     | 50/100 [00:01<00:00, 51.65it/s] 56%|#####6    | 56/100 [00:01<00:00, 48.23it/s] 61%|######1   | 61/100 [00:01<00:00, 47.86it/s] 67%|######7   | 67/100 [00:01<00:00, 48.52it/s] 72%|#######2  | 72/100 [00:01<00:00, 46.94it/s] 77%|#######7  | 77/100 [00:01<00:00, 47.61it/s] 82%|########2 | 82/100 [00:01<00:00, 48.17it/s] 87%|########7 | 87/100 [00:01<00:00, 48.54it/s] 93%|#########3| 93/100 [00:01<00:00, 49.75it/s] 99%|#########9| 99/100 [00:02<00:00, 51.40it/s]100%|##########| 100/100 [00:02<00:00, 48.90it/s]
Train Epoch 1
{
    "Cosine_Loss": 0.6393036643664042,
    "L1_Loss": 0.09860896805301309,
    "L2_Loss": 0.20218651389082273,
    "Loss": 4.040816536744436,
    "Policy_Grad_Norms": 0.9999996216838993,
    "Time_Data_Loading": 0.01570178270339966,
    "Time_Epoch": 0.10535655816396078,
    "Time_Log_Info": 0.000267334779103597,
    "Time_Process_Batch": 0.0014422972997029623,
    "Time_Train_Batch": 0.08771439790725707
}
  0%|          | 0/20 [00:00<?, ?it/s] 85%|########5 | 17/20 [00:00<00:00, 162.15it/s]100%|##########| 20/20 [00:00<00:00, 162.96it/s]
  0%|          | 0/20 [00:00<?, ?it/s] 90%|######### | 18/20 [00:00<00:00, 170.82it/s]100%|##########| 20/20 [00:00<00:00, 171.39it/s]
  0%|          | 0/20 [00:00<?, ?it/s] 85%|########5 | 17/20 [00:00<00:00, 163.70it/s]100%|##########| 20/20 [00:00<00:00, 164.37it/s]
Validation Epoch 1
{
    "Cosine_Loss": 0.751221752166748,
    "L1_Loss": 0.10060184293737014,
    "L2_Loss": 0.22511862789591153,
    "Loss": 4.297973370552063,
    "Time_Data_Loading": 0.002784089247385661,
    "Time_Epoch": 0.006046517690022787,
    "Time_Log_Info": 3.4590562184651695e-05,
    "Time_Process_Batch": 0.00021084944407145182,
    "Time_Train_Batch": 0.002978980541229248
}
video writes to /home/andrew/Desktop/robo_sims/robomimic/robomimic/../bet_trained_models/test/20221208143234/videos/NutAssemblySquare_epoch_1.mp4
rollout: env=NutAssemblySquare, horizon=300, use_goals=False, num_episodes=20
  0%|          | 0/20 [00:00<?, ?it/s]NutAssemblySquare
  0%|          | 0/20 [00:00<?, ?it/s]
run failed with error:
can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.

Traceback (most recent call last):
  File "robomimic/scripts/multitask_train.py", line 376, in main
    train(config, device=device)
  File "robomimic/scripts/multitask_train.py", line 260, in train
    all_rollout_logs, video_paths = TrainUtils.rollout_with_stats(
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/utils/train_utils.py", line 351, in rollout_with_stats
    rollout_info = run_rollout(
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/utils/train_utils.py", line 213, in run_rollout
    ac = policy(ob=ob_dict, goal=goal_dict)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/algo.py", line 476, in __call__
    ac = self.policy.get_action(obs_dict=ob, goal_dict=goal)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/bet.py", line 302, in get_action
    enc_obs = self._format_input(enc_obs , self.env_name) if self.multi_task else enc_obs
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/bet.py", line 150, in _format_input
    x = torch.tensor(np.array(x))
TypeError: can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.

