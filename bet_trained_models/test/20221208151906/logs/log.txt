
============= Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot0_gripper_qpos', 'robot0_eef_quat', 'robot0_eef_pos', 'object']
using obs modality: rgb with keys: []
using obs modality: depth with keys: []
using obs modality: scan with keys: []
/home/andrew/Desktop/robo_sims/robomimic

============= Loaded Environment Metadata =============
obs key object with shape (14,)
obs key robot0_eef_pos with shape (3,)
obs key robot0_eef_quat with shape (4,)
obs key robot0_gripper_qpos with shape (2,)
Created environment with name NutAssemblySquare
Action size is 7
NutAssemblySquare
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}
Created environment with name PickPlaceCan
Action size is 7
PickPlaceCan
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}
Created environment with name Lift
Action size is 7
Lift
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}


============= Model Summary =============
BET (
  ModuleDict(
    (mlp): MLP(
        input_dim=7
        output_dim=7
        layer_dims=[512, 512]
        layer_func=Linear
        dropout=None
        act=Mish
        output_act=Tanh
    )
    (policy): MinGPT(
      (model): GPT(
        (tok_emb): Linear(in_features=26, out_features=120, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (blocks): Sequential(
          (0): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (1): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (2): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (3): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (4): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (5): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): GELU()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (ln_f): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
        (head): Linear(in_features=120, out_features=512, bias=False)
      )
    )
  )
)

SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 48%|####8     | 87/180 [00:00<00:00, 865.39it/s] 97%|#########6| 174/180 [00:00<00:00, 865.87it/s]100%|##########| 180/180 [00:00<00:00, 865.55it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 803.91it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 48%|####8     | 87/180 [00:00<00:00, 864.89it/s] 97%|#########6| 174/180 [00:00<00:00, 860.24it/s]100%|##########| 180/180 [00:00<00:00, 859.82it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 826.50it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/180 [00:00<?, ?it/s] 48%|####8     | 87/180 [00:00<00:00, 861.11it/s] 97%|#########6| 174/180 [00:00<00:00, 847.99it/s]100%|##########| 180/180 [00:00<00:00, 845.59it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/20 [00:00<?, ?it/s]100%|##########| 20/20 [00:00<00:00, 840.31it/s]

============= Training Dataset =============
[SequenceDataset (
	path=datasets/square/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=180
	num_sequences=27165
), SequenceDataset (
	path=/home/andrew/Desktop/robo_sims/robomimic/datasets/can/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=180
	num_sequences=20883
), SequenceDataset (
	path=/home/andrew/Desktop/robo_sims/robomimic/datasets/lift/ph/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=180
	num_sequences=8640
)]

  0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   3%|3         | 3/100 [00:00<00:03, 25.35it/s]K-means clustering:   6%|6         | 6/100 [00:00<00:03, 25.30it/s]K-means clustering:   9%|9         | 9/100 [00:00<00:03, 25.32it/s]K-means clustering:  12%|#2        | 12/100 [00:00<00:03, 25.24it/s]K-means clustering:  15%|#5        | 15/100 [00:00<00:03, 25.24it/s]K-means clustering:  18%|#8        | 18/100 [00:00<00:03, 25.25it/s]K-means clustering:  21%|##1       | 21/100 [00:00<00:03, 25.26it/s]K-means clustering:  24%|##4       | 24/100 [00:00<00:03, 25.22it/s]K-means clustering:  27%|##7       | 27/100 [00:01<00:02, 25.11it/s]K-means clustering:  30%|###       | 30/100 [00:01<00:02, 24.81it/s]K-means clustering:  33%|###3      | 33/100 [00:01<00:02, 23.93it/s]K-means clustering:  36%|###6      | 36/100 [00:01<00:02, 24.17it/s]K-means clustering:  39%|###9      | 39/100 [00:01<00:02, 24.49it/s]K-means clustering:  42%|####2     | 42/100 [00:01<00:02, 24.53it/s]K-means clustering:  45%|####5     | 45/100 [00:01<00:02, 24.78it/s]K-means clustering:  48%|####8     | 48/100 [00:01<00:02, 24.94it/s]K-means clustering:  51%|#####1    | 51/100 [00:02<00:01, 25.00it/s]K-means clustering:  54%|#####4    | 54/100 [00:02<00:01, 25.06it/s]K-means clustering:  57%|#####6    | 57/100 [00:02<00:01, 25.05it/s]K-means clustering:  60%|######    | 60/100 [00:02<00:01, 25.10it/s]K-means clustering:  63%|######3   | 63/100 [00:02<00:01, 25.21it/s]K-means clustering:  66%|######6   | 66/100 [00:02<00:01, 24.91it/s]K-means clustering:  69%|######9   | 69/100 [00:02<00:01, 24.94it/s]K-means clustering:  72%|#######2  | 72/100 [00:02<00:01, 24.99it/s]K-means clustering:  75%|#######5  | 75/100 [00:03<00:00, 25.06it/s]K-means clustering:  78%|#######8  | 78/100 [00:03<00:00, 25.11it/s]K-means clustering:  81%|########1 | 81/100 [00:03<00:00, 25.18it/s]K-means clustering:  84%|########4 | 84/100 [00:03<00:00, 25.20it/s]K-means clustering:  87%|########7 | 87/100 [00:03<00:00, 25.27it/s]K-means clustering:  90%|######### | 90/100 [00:03<00:00, 25.23it/s]K-means clustering:  93%|#########3| 93/100 [00:03<00:00, 25.09it/s]K-means clustering:  96%|#########6| 96/100 [00:03<00:00, 24.97it/s]K-means clustering:  99%|#########9| 99/100 [00:03<00:00, 24.95it/s]K-means clustering: 100%|##########| 100/100 [00:04<00:00, 24.98it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  1%|1         | 1/100 [00:00<00:18,  5.39it/s]  7%|7         | 7/100 [00:00<00:03, 26.94it/s] 12%|#2        | 12/100 [00:00<00:02, 35.22it/s] 18%|#8        | 18/100 [00:00<00:01, 41.34it/s] 24%|##4       | 24/100 [00:00<00:01, 44.54it/s] 30%|###       | 30/100 [00:00<00:01, 46.92it/s] 36%|###6      | 36/100 [00:00<00:01, 48.79it/s] 42%|####2     | 42/100 [00:00<00:01, 50.08it/s] 48%|####8     | 48/100 [00:01<00:01, 51.05it/s] 54%|#####4    | 54/100 [00:01<00:00, 51.77it/s] 60%|######    | 60/100 [00:01<00:00, 52.45it/s] 66%|######6   | 66/100 [00:01<00:00, 52.80it/s] 72%|#######2  | 72/100 [00:01<00:00, 52.71it/s] 78%|#######8  | 78/100 [00:01<00:00, 52.45it/s] 84%|########4 | 84/100 [00:01<00:00, 52.75it/s] 90%|######### | 90/100 [00:01<00:00, 52.74it/s] 96%|#########6| 96/100 [00:02<00:00, 52.56it/s]100%|##########| 100/100 [00:02<00:00, 48.07it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  6%|6         | 6/100 [00:00<00:01, 52.28it/s] 12%|#2        | 12/100 [00:00<00:01, 52.38it/s] 18%|#8        | 18/100 [00:00<00:01, 52.18it/s] 24%|##4       | 24/100 [00:00<00:01, 52.55it/s] 30%|###       | 30/100 [00:00<00:01, 52.73it/s] 36%|###6      | 36/100 [00:00<00:01, 53.06it/s] 42%|####2     | 42/100 [00:00<00:01, 53.14it/s] 48%|####8     | 48/100 [00:00<00:00, 52.83it/s] 54%|#####4    | 54/100 [00:01<00:00, 52.30it/s] 60%|######    | 60/100 [00:01<00:00, 52.22it/s] 66%|######6   | 66/100 [00:01<00:00, 52.35it/s] 72%|#######2  | 72/100 [00:01<00:00, 52.31it/s] 78%|#######8  | 78/100 [00:01<00:00, 52.57it/s] 84%|########4 | 84/100 [00:01<00:00, 52.61it/s] 90%|######### | 90/100 [00:01<00:00, 52.56it/s] 96%|#########6| 96/100 [00:01<00:00, 52.54it/s]100%|##########| 100/100 [00:01<00:00, 52.52it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  6%|6         | 6/100 [00:00<00:01, 50.34it/s] 12%|#2        | 12/100 [00:00<00:01, 51.53it/s] 18%|#8        | 18/100 [00:00<00:01, 52.17it/s] 24%|##4       | 24/100 [00:00<00:01, 52.40it/s] 30%|###       | 30/100 [00:00<00:01, 52.24it/s] 36%|###6      | 36/100 [00:00<00:01, 52.16it/s] 42%|####2     | 42/100 [00:00<00:01, 51.75it/s] 48%|####8     | 48/100 [00:00<00:01, 51.46it/s] 54%|#####4    | 54/100 [00:01<00:00, 51.78it/s] 60%|######    | 60/100 [00:01<00:00, 51.15it/s] 66%|######6   | 66/100 [00:01<00:00, 51.31it/s] 72%|#######2  | 72/100 [00:01<00:00, 52.02it/s] 78%|#######8  | 78/100 [00:01<00:00, 52.37it/s] 84%|########4 | 84/100 [00:01<00:00, 52.76it/s] 90%|######### | 90/100 [00:01<00:00, 52.76it/s] 96%|#########6| 96/100 [00:01<00:00, 53.11it/s]100%|##########| 100/100 [00:01<00:00, 52.22it/s]
Train Epoch 1
{
    "Cosine_Loss": 0.6393036643664042,
    "L1_Loss": 0.09860896805301309,
    "L2_Loss": 0.20218651389082273,
    "Loss": 4.040816536744436,
    "Policy_Grad_Norms": 0.9999996216838993,
    "Time_Data_Loading": 0.015179208914438884,
    "Time_Epoch": 0.09834545850753784,
    "Time_Log_Info": 0.00023162364959716797,
    "Time_Process_Batch": 0.0012946128845214844,
    "Time_Train_Batch": 0.08144892454147339
}
  0%|          | 0/20 [00:00<?, ?it/s] 85%|########5 | 17/20 [00:00<00:00, 162.90it/s]100%|##########| 20/20 [00:00<00:00, 161.33it/s]
  0%|          | 0/20 [00:00<?, ?it/s] 85%|########5 | 17/20 [00:00<00:00, 164.77it/s]100%|##########| 20/20 [00:00<00:00, 164.80it/s]
  0%|          | 0/20 [00:00<?, ?it/s] 80%|########  | 16/20 [00:00<00:00, 157.41it/s]100%|##########| 20/20 [00:00<00:00, 157.50it/s]
Validation Epoch 1
{
    "Cosine_Loss": 0.751221752166748,
    "L1_Loss": 0.10060184293737014,
    "L2_Loss": 0.22511862789591153,
    "Loss": 4.297973370552063,
    "Time_Data_Loading": 0.0028534134229024253,
    "Time_Epoch": 0.006224421660105387,
    "Time_Log_Info": 3.940264383951823e-05,
    "Time_Process_Batch": 0.0002319653828938802,
    "Time_Train_Batch": 0.003069607416788737
}
video writes to /home/andrew/Desktop/robo_sims/robomimic/robomimic/../bet_trained_models/test/20221208151906/videos/NutAssemblySquare_epoch_1.mp4
rollout: env=NutAssemblySquare, horizon=300, use_goals=False, num_episodes=20
  0%|          | 0/20 [00:00<?, ?it/s]  0%|          | 0/20 [00:00<?, ?it/s]
run failed with error:
can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.

Traceback (most recent call last):
  File "robomimic/scripts/multitask_train.py", line 376, in main
    train(config, device=device)
  File "robomimic/scripts/multitask_train.py", line 260, in train
    all_rollout_logs, video_paths = TrainUtils.rollout_with_stats(
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/utils/train_utils.py", line 351, in rollout_with_stats
    rollout_info = run_rollout(
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/utils/train_utils.py", line 214, in run_rollout
    ac = policy(ob=ob_dict, goal=goal_dict)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/algo.py", line 476, in __call__
    ac = self.policy.get_action(obs_dict=ob, goal_dict=goal)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/bet.py", line 302, in get_action
    enc_obs = self._format_input(enc_obs , self.env_name) if self.multi_task else enc_obs
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/algo/bet.py", line 150, in _format_input
    x = torch.tensor(np.array(x))
TypeError: can't convert np.ndarray of type numpy.object_. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.

