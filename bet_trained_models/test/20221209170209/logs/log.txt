
============= Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot0_eef_quat', 'robot0_eef_pos', 'object', 'robot0_gripper_qpos']
using obs modality: rgb with keys: []
using obs modality: depth with keys: []
using obs modality: scan with keys: []
/home/andrew/Desktop/robo_sims/robomimic

============= Loaded Environment Metadata =============
obs key object with shape (14,)
obs key robot0_eef_pos with shape (3,)
obs key robot0_eef_quat with shape (4,)
obs key robot0_gripper_qpos with shape (2,)
Created environment with name NutAssemblySquare
Action size is 7
NutAssemblySquare
{
    "camera_depths": false,
    "camera_heights": 84,
    "camera_widths": 84,
    "control_freq": 20,
    "controller_configs": {
        "control_delta": true,
        "damping": 1,
        "damping_limits": [
            0,
            10
        ],
        "impedance_mode": "fixed",
        "input_max": 1,
        "input_min": -1,
        "interpolation": null,
        "kp": 150,
        "kp_limits": [
            0,
            300
        ],
        "orientation_limits": null,
        "output_max": [
            0.05,
            0.05,
            0.05,
            0.5,
            0.5,
            0.5
        ],
        "output_min": [
            -0.05,
            -0.05,
            -0.05,
            -0.5,
            -0.5,
            -0.5
        ],
        "position_limits": null,
        "ramp_ratio": 0.2,
        "type": "OSC_POSE",
        "uncouple_pos_ori": true
    },
    "has_offscreen_renderer": true,
    "has_renderer": false,
    "ignore_done": true,
    "render_gpu_device_id": 0,
    "reward_shaping": false,
    "robots": [
        "Panda"
    ],
    "use_camera_obs": false,
    "use_object_obs": true
}


============= Model Summary =============
BET (
  ModuleDict(
    (mlp): MLP(
        input_dim=7
        output_dim=7
        layer_dims=[512, 512]
        layer_func=Linear
        dropout=None
        act=Mish
        output_act=Tanh
    )
    (policy): MinGPT(
      (model): GPT(
        (tok_emb): Linear(in_features=23, out_features=120, bias=True)
        (drop): Dropout(p=0.1, inplace=False)
        (blocks): Sequential(
          (0): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): Mish()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (1): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): Mish()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (2): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): Mish()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (3): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): Mish()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (4): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): Mish()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
          (5): Block(
            (ln1): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (ln2): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
            (attn): CausalSelfAttention(
              (key): Linear(in_features=120, out_features=120, bias=True)
              (query): Linear(in_features=120, out_features=120, bias=True)
              (value): Linear(in_features=120, out_features=120, bias=True)
              (attn_drop): Dropout(p=0.1, inplace=False)
              (resid_drop): Dropout(p=0.1, inplace=False)
              (proj): Linear(in_features=120, out_features=120, bias=True)
            )
            (mlp): Sequential(
              (0): Linear(in_features=120, out_features=480, bias=True)
              (1): Mish()
              (2): Linear(in_features=480, out_features=120, bias=True)
              (3): Dropout(p=0.1, inplace=False)
            )
          )
        )
        (ln_f): LayerNorm((120,), eps=1e-05, elementwise_affine=True)
        (head): Linear(in_features=120, out_features=512, bias=False)
      )
    )
  )
)

SequenceDataset: loading dataset into memory...
  0%|          | 0/270 [00:00<?, ?it/s] 29%|##9       | 79/270 [00:00<00:00, 784.94it/s] 59%|#####9    | 160/270 [00:00<00:00, 797.25it/s] 90%|########9 | 242/270 [00:00<00:00, 805.96it/s]100%|##########| 270/270 [00:00<00:00, 801.71it/s]
SequenceDataset: loading dataset into memory...
  0%|          | 0/30 [00:00<?, ?it/s]100%|##########| 30/30 [00:00<00:00, 825.26it/s]

============= Training Dataset =============
SequenceDataset (
	path=datasets/square/mh/low_dim.hdf5
	obs_keys=('object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_gripper_qpos')
	seq_length=10
	filter_key=train
	frame_stack=1
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=270
	num_sequences=72707
)

  0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   0%|          | 0/100 [00:00<?, ?it/s]K-means clustering:   2%|2         | 2/100 [00:00<00:06, 15.06it/s]K-means clustering:   4%|4         | 4/100 [00:00<00:06, 14.66it/s]K-means clustering:   6%|6         | 6/100 [00:00<00:06, 14.39it/s]K-means clustering:   8%|8         | 8/100 [00:00<00:06, 14.23it/s]K-means clustering:  10%|#         | 10/100 [00:00<00:06, 14.52it/s]K-means clustering:  12%|#2        | 12/100 [00:00<00:06, 14.62it/s]K-means clustering:  14%|#4        | 14/100 [00:00<00:05, 14.65it/s]K-means clustering:  16%|#6        | 16/100 [00:01<00:05, 14.70it/s]K-means clustering:  18%|#8        | 18/100 [00:01<00:05, 14.96it/s]K-means clustering:  20%|##        | 20/100 [00:01<00:05, 15.21it/s]K-means clustering:  22%|##2       | 22/100 [00:01<00:05, 15.28it/s]K-means clustering:  24%|##4       | 24/100 [00:01<00:04, 15.35it/s]K-means clustering:  26%|##6       | 26/100 [00:01<00:04, 15.41it/s]K-means clustering:  28%|##8       | 28/100 [00:01<00:04, 15.54it/s]K-means clustering:  30%|###       | 30/100 [00:01<00:04, 15.59it/s]K-means clustering:  32%|###2      | 32/100 [00:02<00:04, 15.63it/s]K-means clustering:  34%|###4      | 34/100 [00:02<00:04, 15.63it/s]K-means clustering:  36%|###6      | 36/100 [00:02<00:04, 15.69it/s]K-means clustering:  38%|###8      | 38/100 [00:02<00:04, 15.43it/s]K-means clustering:  40%|####      | 40/100 [00:02<00:03, 15.48it/s]K-means clustering:  42%|####2     | 42/100 [00:02<00:03, 15.62it/s]K-means clustering:  44%|####4     | 44/100 [00:02<00:03, 15.45it/s]K-means clustering:  46%|####6     | 46/100 [00:03<00:03, 15.40it/s]K-means clustering:  48%|####8     | 48/100 [00:03<00:03, 15.33it/s]K-means clustering:  50%|#####     | 50/100 [00:03<00:03, 15.22it/s]K-means clustering:  52%|#####2    | 52/100 [00:03<00:03, 15.10it/s]K-means clustering:  54%|#####4    | 54/100 [00:03<00:03, 15.03it/s]K-means clustering:  56%|#####6    | 56/100 [00:03<00:02, 14.99it/s]K-means clustering:  58%|#####8    | 58/100 [00:03<00:02, 14.99it/s]K-means clustering:  60%|######    | 60/100 [00:03<00:02, 14.75it/s]K-means clustering:  62%|######2   | 62/100 [00:04<00:02, 14.50it/s]K-means clustering:  64%|######4   | 64/100 [00:04<00:02, 14.32it/s]K-means clustering:  66%|######6   | 66/100 [00:04<00:02, 14.55it/s]K-means clustering:  68%|######8   | 68/100 [00:04<00:02, 14.69it/s]K-means clustering:  70%|#######   | 70/100 [00:04<00:02, 14.50it/s]K-means clustering:  72%|#######2  | 72/100 [00:04<00:01, 15.02it/s]K-means clustering:  74%|#######4  | 74/100 [00:04<00:01, 15.48it/s]K-means clustering:  76%|#######6  | 76/100 [00:05<00:01, 15.85it/s]K-means clustering:  78%|#######8  | 78/100 [00:05<00:01, 16.27it/s]K-means clustering:  80%|########  | 80/100 [00:05<00:01, 16.41it/s]K-means clustering:  82%|########2 | 82/100 [00:05<00:01, 16.65it/s]K-means clustering:  84%|########4 | 84/100 [00:05<00:00, 16.74it/s]K-means clustering:  86%|########6 | 86/100 [00:05<00:00, 16.62it/s]K-means clustering:  88%|########8 | 88/100 [00:05<00:00, 16.73it/s]K-means clustering:  90%|######### | 90/100 [00:05<00:00, 16.87it/s]K-means clustering:  92%|#########2| 92/100 [00:05<00:00, 16.83it/s]K-means clustering:  94%|#########3| 94/100 [00:06<00:00, 16.99it/s]K-means clustering:  96%|#########6| 96/100 [00:06<00:00, 16.94it/s]K-means clustering:  98%|#########8| 98/100 [00:06<00:00, 16.90it/s]K-means clustering: 100%|##########| 100/100 [00:06<00:00, 17.05it/s]K-means clustering: 100%|##########| 100/100 [00:06<00:00, 15.54it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  0%|          | 0/100 [00:00<?, ?it/s]
run failed with error:
process_batch_for_training() missing 1 required positional argument: 'name'

Traceback (most recent call last):
  File "robomimic/scripts/train.py", line 366, in main
    train(config, device=device)
  File "robomimic/scripts/train.py", line 189, in train
    step_log = TrainUtils.run_epoch(model=model, data_loader=train_loader, epoch=epoch, num_steps=train_num_steps)
  File "/home/andrew/Desktop/robo_sims/robomimic/robomimic/utils/train_utils.py", line 541, in run_epoch
    input_batch = model.process_batch_for_training(batch)
TypeError: process_batch_for_training() missing 1 required positional argument: 'name'

